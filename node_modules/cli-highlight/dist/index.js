"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const hljs = require("highlight.js");
const parse5 = require("parse5");
const theme_1 = require("./theme");
function colorizeNode(node, theme = {}) {
    if (node.type === 'text') {
        return node.data;
    }
    else if (node.type === 'tag') {
        const hljsClass = /hljs-(\w+)/.exec(node.attribs.class);
        const token = hljsClass[1];
        const nodeData = node.childNodes
            .map(node => colorizeNode(node, theme))
            .join('');
        return (theme[token] || theme_1.DEFAULT_THEME[token] || theme_1.plain)(nodeData);
    }
}
function colorize(code, theme = {}) {
    const fragment = parse5.parseFragment(code, {
        treeAdapter: parse5.treeAdapters.htmlparser2,
    });
    return fragment.childNodes.map(node => colorizeNode(node, theme)).join('');
}
/**
 * Apply syntax highlighting to `code` with ASCII color codes. The language is automatically
 * detected if not set.
 *
 * ```ts
 * import {highlight} from 'cli-highlight';
 * import * as fs from 'fs';
 *
 * fs.readFile('package.json', 'utf8', (err: any, json: string) => {
 *     console.log('package.json:');
 *     console.log(highlight(json));
 * });
 * ```
 *
 * @param code The code to highlight
 * @param options Optional options
 */
function highlight(code, options = {}) {
    let html;
    if (options.language) {
        html = hljs.highlight(options.language, code, options.ignoreIllegals, options.continuation).value;
    }
    else {
        html = hljs.highlightAuto(code, options.languageSubset).value;
    }
    return colorize(html, options.theme);
}
exports.highlight = highlight;
/**
 * Returns all supported languages
 */
function listLanguages() {
    return hljs.listLanguages();
}
exports.listLanguages = listLanguages;
/**
 * Returns true if the language is supported
 * @param name A language name, alias or file extension
 */
function supportsLanguage(name) {
    return !!hljs.getLanguage(name);
}
exports.supportsLanguage = supportsLanguage;
exports.default = highlight;
__export(require("./theme"));
//# sourceMappingURL=index.js.map